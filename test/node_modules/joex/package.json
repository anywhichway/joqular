{
  "name": "joex",
  "version": "0.1.3",
  "description": "Javascript Object Extensions",
  "main": "index.js",
  "isomorphic": true,
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha --report lcov -- -R spec",
    "badge": "coverage-badge `coverage-percentage ./coverage/lcov.info --lcov` badge.png"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anywhichway/joex.git"
  },
  "keywords": [
    "intersection",
    "intersect",
    "disjoint",
    "coincident",
    "crossproduct",
    "soundex",
    "betweem",
    "outside",
    "lt",
    "lte",
    "eq",
    "neq",
    "gte",
    "gt",
    "Array.min",
    "Array.max",
    "Array.avg",
    "Array.sum",
    "String.between",
    "String.outside",
    "Date.before",
    "Date.after",
    "Set.some",
    "Set.every",
    "Set.min",
    "Set.max",
    "Set.avg",
    "Set.sum"
  ],
  "author": {
    "name": "Simon Y. Blackwell",
    "email": "syblackwell@anywhichway.com",
    "url": "http://www.github.com/anywhichway"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/anywhichway/joex/issues"
  },
  "homepage": "https://github.com/anywhichway/joex#readme",
  "devDependencies": {
    "chai": "^3.4.1",
    "coverage-percentage": "0.0.2",
    "istanbul": "^0.4.1",
    "mocha": "^2.3.4"
  },
  "readme": "# joex\r\nJavascript Object Extensions\r\n\r\nAdds lt, lte, eq, neq, gte, gt to Number, String, Boolean, Date. Dates can be compared with precision, e.g. *.lt(date,\"Y\")*.\r\n\r\nAdds between and outside to Number and String.\r\n\r\nAdds soundex to String.\r\n\r\nAdds isLeapYear and getLastDayOfMonth methods to Date as well as properties for year, fullYear, month, etc. Also adds data members to represent all of the parts of a Date so that they can be treated in a declarative manner.\r\n\r\nAdds intersection, intersects, disjoint, coincident, crossproduct, min, max, avg to Array and Set.\r\n\r\nAdds some, every, and toJSON to Set. Adds toJSON, which results in an array like representation.\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/8ff33e04aa48424c97f63740e87afd9d)](https://www.codacy.com/app/syblackwell/joex)\r\n\r\n[![NPM](https://nodei.co/npm/joex.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/<joex>/)\r\n\r\n### Philosophy\r\n\r\nThe design philosophy for most extensions is primarily driven be a need for additional functionality.\r\n\r\nNote, there are risks in using polyfills as documented here: http://adamsilver.io/articles/the-disadvantages-of-javascript-polyfills/. However, we have found there are cases where facades and wrappers will not work, making polyfills or subclassing the only choice, i.e. where instanceof semantics must be preserved or major portions of existing code will have to be re-written (introducing yet another set of risks). We attempted to develop the library using subclassing; however, the Chrome engine does some internal checking on instances before method invocation and we were getting errors related to generic function calls and instances not being of the correct type. We will continue to endeavor to enhance this library so that it does not compel the use of a polyfill so that all choice is in the end developer's hands. Meanwhile, the library was designed in such a way that the programmer has the ability to select which polyfills to use and can take the risks in an informed manner.\r\n\r\nExtensions are created by extending the *.prototype* for native constructors so that *instanceOf* behaves as expected across closures.\r\n\r\nFor selectivity, extensions are only created upon request for any given class by calling */<constructor/>.extend()*.\r\n\r\nThe design philosophy for Date involves making objects more declarative than is typical with Javascript because we find this leads to more concise and less bug prone code. It also happens to be useful when indexing objects for [JOQULAR](http://www.github.com/anywhichway/joqular) or other JSON data stores. This is accomplished through the use of Object.defineProperty on class prototypes to create virtual properties with get and set functions, e.g. \r\n\r\n```Object.defineProperty(Date.prototype,\"fullYear\",{enumerable:true,configurable:true,set:function(value) { this.setFullYear(value); },get:function() {return this.getFullYear();}).```\r\n\r\nSince they are semantically un-necessary the *.toJSON* method for Date is not updated to add these properties and they will not be persisted.\r\n\r\n\r\n# Installation\r\n\r\nnpm install joex\r\n\r\nThe index.js and package.json files are compatible with node-require so that joex can be served directly to the browser from the node-modules/joex directory when using node Express.\r\n\r\nTo modify the global objects in a web browser set the global object to its extended equivalent, e.g. Date = Date.extend() To access them in node.js use the normal require syntax, e.g.\r\n\r\n```\r\nvar Date = require(\"joex\").Date.extend()\r\n```\r\n\r\n## Usage\r\n\r\nThe constructors for Array, Set, Boolean, Number, String, Date remain the same as the native implementations.\r\n\r\nNumber, String, Boolean support *.lt, .lte, .eq, .neq, .gte, .gt*. See Array, Set, Date documentation for their respective comparisons.\r\n\r\n### Array\r\n\r\n#### Methods\r\n\r\n*.avg(all)* - Returns the avg value of numeric values or items coerceable into numerics (e.g. Date, Time) in the array. Non-numeric values are ignored unless *all* is set. If *all* is *true*, then non-numeric values increment the count by which the average is computed. If *all* is a function and returns a numeric when called with a value, the numeric is added to the values to be averaged. If it returns a non-numeric, the value is ignored and the count is not incremented.\r\n\r\n*.max()* - Returns the max value in the array.\r\n\r\n*.min()* - Returns the max value in the array.\r\n\r\n*.sum(filter)* - Returns the avg value of numeric values or items coerceable into numerics (e.g. Date, Time) in the array. Non-numeric values are ignored unless *all* is a function and returns a numeric when called with a value. In which case, the numeric is added to the sum. If it returns a non-numeric, the value is ignored.\r\n\r\n### Date\r\n\r\n#### Properties\r\n\r\n*.year, .fullYear, .month, .dayofMonth, .hours, .minutes, .seconds, .milliseconds* are all exposed as properties that correspond to the similarly named get and set functions. Note, since *.getYear* is being deprecated from Javascript, *.year* always corresponds to *.fullYear*.\r\n\r\n#### Methods\r\n\r\nSupports *.lt, .lte, .eq, .neq, .gte, .gt* with an additional *precision* argument, i.e. \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". For example:\r\n\r\n```\r\nnew Date().eq(new Date(),\"Y\");\r\n```\r\n\r\nPrecision operates at the least number of milliseconds required to represent a Date, i.e. \"Y\" is effectively represented by converting an internal value to *new Date(this.getFullYear(),0)*.\r\n\r\n*.getLastDayOfMonth* - Returns the last day of the month for the instance.\r\n\r\n*.isLeapYear()* - Returns *true* if the instance is a leap year.\r\n\r\n### Number\r\n\r\n#### Methods\r\n\r\n*.between(a,b)* - Returns *true* if instances is between *a* and *b*, including the boundaries.\r\n\r\n*.outside(a,b)* - Returns *true* if instances is not between *a* and *b*.\r\n\r\n\r\n### Set\r\n\r\n#### Methods\r\n\r\nSupports the same extended summary methods as Array.\r\n\r\n*.every* - Behaves the same as *.every* for Arrays.\r\n\r\n*.some* - Behaves the same as *.some* for Arrays.\r\n\r\n*.toJSON* - Returns the set as an Array.\r\n\r\n### String\r\n\r\n#### Methods\r\n\r\n*.between(a,b)* - Returns *true* if instances is between *a* and *b*, including the boundaries.\r\n\r\n*.echoes(string)* - Returns *true* if instance sounds like *string*.\r\n\r\n*.outside(a,b)* - Returns *true* if instances is not between *a* and *b*.\r\n\r\n*.soundex()* - Returns soundex encoding of instance.\r\n\r\n# Release History (reverse chronological order)\r\n\r\nv0.1.3 2016-01-09 Updated documentation to alert users to the risks of polyfills.\r\n\r\nv0.1.2 2016-01-07 Added *.intersection* to Array and Set. Enhanced *.intersects*,*.coincident*, and *.disjoint* to take any number of arguments, added more documentation and unit tests.\r\n\r\nv0.1.1 2016-01-03 Added substantial amounts of documentation and unit tests. Add filter capability to *.sum* and *.avg*. Corrected a flaw in Date precision that resulted in only part of a date being considered.\r\n\r\nv0.1.0 2015-12-31 Modified so code does not directly overload built-in objects. Started adding unit tests. This was a breaking change with respect to module loading, so semantic version was incremented.\r\n\r\nv0.0.9 2015-12-31 Added isLeapYear and getLastDayOfMonth functions for Date. Remove dependencies on Time and TimeSpan.\r\n\r\nv0.0.8 2015-12-13 Codacy improvements.\r\n\r\nv0.0.7 2015-12-13 Removed data extensions to Date object.\r\n\r\nv0.0.6 2015-12-13 Codacy improvements\r\n\r\nv0.0.5 2015-11-29 Initial public release. No unit tests yet. Consider this an ALPHA.\r\n\r\n# License\r\n\r\nMIT License - see LICENSE file",
  "readmeFilename": "README.md",
  "gitHead": "2ad98d3c5cabd5f788472b4e0c35f33919c2a5fc",
  "_id": "joex@0.1.3",
  "_shasum": "ff10e9ed37f7d0bf8fb49bfb3c3c6372f737eace",
  "_from": "joex@*"
}
