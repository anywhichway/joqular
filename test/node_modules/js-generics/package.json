{
  "name": "js-generics",
  "version": "0.0.6",
  "description": "A generic function definition and dispatch library for Javascript",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anywhichway/js-generics.git"
  },
  "keywords": [
    "generic",
    "overload",
    "dispatch"
  ],
  "author": {
    "name": "Simon Y. Blackwell",
    "email": "syblackwell@anywhichway.com",
    "url": "http://www.github.com/anywhichway"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/anywhichway/js-generics/issues"
  },
  "homepage": "https://github.com/anywhichway/js-generics#readme",
  "devDependencies": {
    "chai": "^3.4.1",
    "istanbul": "^0.4.1",
    "mocha": "^2.3.4"
  },
  "readme": "# js-generics\r\nA generic function definition and multi-dispatch library for Javascript.\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/9fa47bc000d84db4b1336fc61e38fb58)](https://www.codacy.com/app/syblackwell/js-generics)\r\n\r\n# Installation\r\n\r\nnpm install js-generics\r\n\r\nThe index.js and package.json files are compatible with [node-require](http://www.github.com/anywhichway/joqular) so that js-generics can be served directly to the browser from the node-modules/js-generics directory when using node Express.\r\n\r\n# Usage\r\n\r\nMulti-dispatch generic functions support the selection and execution of a function based on the types and number of arguments. A common use is supporting mathematical operations on different types of objects. For example:\r\n\r\n```\r\nvar sum = generic(function() { throw new Error(\"can't sum \" + JSON.stringify(arguments)); } )\r\n\t.method(\"number\",\"number\",\r\n\t\t\t function(arg1,arg2) { return arg1 + arg2; })\r\n\t.method(function(arg) { return arg instanceof Array;},\"number\",\r\n\t\t\t function(arg1, arg2) { arg1.forEach(function(item,i) { arg1[i] += arg2; }); return arg1; });\r\n```\r\n\r\nIn the example above the generic function *sum* is defined to throw an error if no matching dispatch can be found. Matching dispatches have two arguments of type number or a first argument of kind array and a second of type number.\r\n\r\nThe general form of usage is:\r\n\r\n```\r\ngeneric(<default function>).method(<type matcher>[,<type matcher>...],<function to call>)[.method(<type matcher>[,<type matcher>...],<function to call>),...]\r\n```\r\n\r\n*\\<default function\\>* - This function is called if no matching dispatches are found. It can take any form and is called as *<default function>.apply(this,arguments)*. As a result generic functions can be included as methods on objects.\r\n\r\n*\\<type matcher\\>* - These should be primitive type names or functions. If a function, it's sole responsibility is to return *true* or *false* if the argument type is correct. The number of \\<type matcher\\> must match the number of arguments to \\<function to call\\>, or the last \\<type matcher\\> must be the special value *generic.VARGS*.\r\n\r\n*\\<function to call\\>* - This function does the desired work. It is called as *\\<type matcher\\>.apply(this,arguments)*.\r\n\r\n.*method* calls can be chained and the last matching method is the one invoked by the dispatcher.\r\n\r\n# Release History (reverse chronological order)\r\n\r\nv0.0.5 2016-01-03 Added unit tests and documentation.\r\n\r\nv0.0.4 2015-12-13 Codacy improvements\r\n\r\nv0.0.3 2015-12-13 Initial public commit.\r\n\r\n# License\r\n\r\nMIT License - see LICENSE file\r\n",
  "readmeFilename": "README.md",
  "gitHead": "c031510101a4439f60786a6641534eb617af3fa5",
  "_id": "js-generics@0.0.6",
  "_shasum": "e5fda9efd9b72eccff0323368ecc92a4b69b5576",
  "_from": "js-generics@*"
}
