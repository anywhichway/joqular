{
  "name": "about-time",
  "version": "0.1.3",
  "description": "Javascript library for managing and comparing Time, Duration, TimeSpan objects in manners similar to Date",
  "main": "index.js",
  "isomorphic": true,
  "scripts": {
    "test": "istanbul cover ./node_modules/mocha/bin/_mocha -report lcov -- -R spec"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anywhichway/about-time.git"
  },
  "keywords": [
    "time",
    "date",
    "duration",
    "timespan"
  ],
  "author": {
    "name": "Simon Y. Blackwell",
    "email": "syblackwell@anywhichway.com",
    "url": "http://www.github.com/anywhichway"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/anywhichway/about-time/issues"
  },
  "homepage": "https://github.com/anywhichway/about-time#readme",
  "dependencies": {},
  "devDependencies": {
    "chai": "^3.4.1",
    "istanbul": "^0.4.1",
    "mocha": "^2.3.4",
    "codacy-coverage": "^1.1.3"
  },
  "readme": "# about-time\r\nAbout-time is Javascript browser and server library for managing, comparing, and doing arithmetic on Time, Duration, TimeSpan objects in manners similar to and beyond those provided by Date.\r\n\r\nTime supports all the methods supported by Date, declarative access to all get and set values, e.g. */<instance/>.fullYear* is the same as getFullYear(), and adds the capability to represent only a specific precision, e.g. \"Y\", \"M\", \"h\", plus the ability to determine if it is within a given TimeSpan.\r\n\r\nDurations are stored as milliseconds but may be Infinite in length and provide access at the typically useful levels of seconds, minutes, hours, days, weeks, months, quarters, years. Durations support arithmetic manipulation and can also be compared at varying precisions.\r\n\r\nTimeSpans are stored as starting and ending milliseconds which include -Infinity and Infinity. They support comparisons with other TimeSpans and Times such as before, after, intersection, coincident, and disjoint.\r\n\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/44679d69e6a749d29cb67c75b2212951)](https://www.codacy.com/app/syblackwell/about-time)\r\n\r\n### Philosophy\r\n\r\nThe classes in about-time were originally part of [JOQULAR](http://www.github.com/anywhichway/joqular) v1 in order to support temporal database logic. Because they are generically useful and in order to simplify the code base of JOQULAR in preparation for release of JOQULAR v2, they were extracted into their own library and re-written.\r\n\r\nThe design philosophy involves making objects more declarative than is typical with Javascript because we find this leads to more concise and less bug prone code. It also happens to be useful when indexing objects for JOQULAR or other JSON data stores. This is accomplished through the use of Object.defineProperty on class prototypes to create virtual properties with get and set functions, e.g. \r\n\r\n```Object.defineProperty(Time.prototype,\"fullYear\",{enumerable:true,configurable:true,set:function(value) { this.setFullYear(value); },get:function() {return this.getFullYear();}).```\r\n\r\nNote, the property is enumerable; however, since it is not semantically necessary for serializing and restoring, a toJSON method is also defined, i.e.\r\n\r\n```Time.prototype.toJSON = function() { return {time: this.time, precisions: this.precision} }```\r\n\r\n# Installation\r\n\r\nnpm install about-time\r\n\r\nThe index.js and package.json files are compatible with [node-require](http://www.github.com/anywhichway/node-require) so that about-time can be served directly to the browser from the node-modules/about-time directory when using node Express.\r\n\r\nTime, Duration, and TimeSpan become global objects when loaded in a web browser. To access them in node.js use the normal require syntax, e.g.\r\n\r\n```\r\nvar Time = require(\"about-time\").Time\r\n```\r\n\r\n# Usage\r\n\r\nTime, Duration, TimeSpan all support *.toJSON* and *.revive*.\r\n\r\n*.toJSON* - creates an object with just those properties required to persist or revive an instance without loosing information.\r\n\r\n*.revive(object)* - will return an instance based on properties of the provided object. A TypeError is thrown if insufficient data is available.\r\n\r\nThey all also support the comparison functions: *.lt, .lte, .eq, .neq, .gte, .gt*.\r\n\r\n\r\n## Time\r\n\r\n### Constructor\r\n\r\n*new Time([(milliseconds|Date|TimeSpan|datestring)=new Date()[,precision)* - Constructs a Time instance from a value of one of the types at the provided precision, \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". The time is represented internally as the number of milliseconds since January 1st, 1970. The values -Infinity and Infinity are legal for milliseconds. If no first argument is provided, the Time defaults to the current time by using new Date().\r\n\r\nPrecision boundaries exist at the lowest number of milliseconds required to represent the Time; hence, a year precision has less milliseconds than a month precision. For example, \"Y\" is effectively represented by converting an internal value to *new Date(this.getFullYear(),0).getTime()*.\r\n\r\n### Properties\r\n\r\n*.time* - The number of milliseconds since January 1, 1970 used as a basis for computing *.valueOf()* at *.precision*.\r\n\r\n*.precision* - one of \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". \r\n\r\n### Methods\r\n\r\nTime supports all the methods supported by Date.\r\n\r\n*.lt(time[,precision=\"ms\"])* - Returns true if instance is less than *value* at the specified *precision*, \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". Value must be another time instance, or something that can be coerced into a Time instance. Comparisons are done at the specified precision, or the precision set for the instance. Unlike Duration, Time does not yet support precision at the (Q)uarter or (W)eek level.\r\n\r\nTime also supports *.lte, .eq, .neq .gte, .gt*.\r\n\r\n*.in(timespan[,precision=\"ms\"])* - returns true if the Time is within the  *timespan* provided at the specified *precision*, \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". The *timespan* argument will be coerced into a TimeSpan if possible.\r\n\r\n*.toPrecision(precision[,modify=true])* - makes future comparison of the Time sensitive to the provided *precision*, \"Y\",\"M\",\"D\",\"h\",\"m\",\"s\",\"ms\". If modify is true, the same instance is returned, otherwise a new instance is returned.\r\n\r\n*.valueOf()* - returns *.milliseconds* modified to the current *.precision*.\r\n\r\n*.withPrecision(precision)* - returns the instance after setting the precision.\r\n\r\n\r\n## Duration\r\n\r\nDuration assumes there are 31557600 seconds in a year. Internal calculations have durations accurate to the millisecond.\r\n\r\nDuration instances can be manipulated using arithmetic operators. Here are a few unit tests that provide examples:\r\n\r\n```\r\n it('+ ',function() {\r\n\t\tvar d1 = new Duration(1,\"Y\"), d2 = new Duration(1,\"Y\");\r\n\t\tvar result = new Duration(d1 + d2);\r\n\t\texpect(result.years).to.be.equal(2);\r\n\t\texpect(result.months).to.be.equal(24);\r\n\t });\r\n it('- ',function() {\r\n\t\tvar d1 = new Duration(1,\"Y\"), d2 = new Duration(1,\"Y\");\r\n\t\tvar result = new Duration(d1 - d2);\r\n\t\texpect(result.years).to.be.equal(0);\r\n\t\texpect(result.months).to.be.equal(0);\r\n });\r\n it('/ ',function() {\r\n\t\tvar d1 = new Duration(1,\"Y\"), d2 = new Duration(6,\"M\");\r\n\t\tvar result = d1 / d2;\r\n\t\texpect(result).to.be.equal(2);\r\n });\r\n```\r\n\r\n### Constructor\r\n\r\n*new Duration((count|Duration)=Infinity[,period=\"ms\"])* - Creates a Duration of the given *count* or based on Duration of type *period*. The default duration is an Infinite number of milliseconds.\r\n\r\n### Properties\r\n\r\n*.count* - Number of periods in the Duration.\r\n\r\n*.length* - The number of milliseconds in the Duration. \"Q\" and \"M\" are psuedo-quarters and psuedo-months respectively since quarters and months are not always the same number of milliseconds. Q = (31557600 * 1000)/4, M = (31557600 * 1000)/12\r\n\r\n*.period* - Type of Duration, one of \"Y\",\"Q\",\"M\",\"W\",\"D\",\"h\",\"m\",\"s\",\"ms\".\r\n\r\n*.range* - Reserved for future support of at least and at most comparisons. Legal values are Duration.ATLEAST, Duration.EXACT, Duration.ATMOST\r\n\r\nThese properties are READONLY and may be fractions: *.years, .quarters, .months, .weeks, .days, .hours, .minutes, .seconds, .milliseconds.*. An error will be thrown if there is an attempt to modify the property. They are not added to JSON representations of an instance.\r\n\r\n\r\n### Methods\r\n\r\n*.lt(time[,precision=\"ms\"])* - Returns true if instance is less than *value* at the specified *precision*, \"Y\",\"Q\",\"M\",\"W\",\"D\",\"h\",\"m\",\"s\",\"ms\". Value must be another time instance, or something that can be coerced into a Time instance. Comparisons are done at the specified precision.\r\n\r\nDuration also supports *.lte, .eq, .neq .gte, .gt*.\r\n\r\n*.toJSON* - returns {count: this.count, period: this.period, range: this.range}\r\n\r\n\r\n## TimeSpan\r\n\r\n\r\n### Constructor\r\n\r\n*new TimeSpan([(milliseconds|Date|TimeSpan|datestring|Time)=-Infinity[,(milliseconds|Date|TimeSpan|datestring|Time)=Infinity)* - Creates a TimeSpan with *.starts* = milliseconds from January 1st, 1970 equal to the first argument and *.ends* = milliseconds from January 1st, 1970 equal to the second argument. Unless the arguments are TimeSpans, in which case it takes the first TimeSpan's start and the second's end in order to create a merged TimeSpan.\r\n\r\n### Properties\r\n\r\n*.ends* - Milliseconds since January 1st, 1970 at which the TimeSpan ends. May be *Infinity*.\r\n\r\n*.starts* - Milliseconds since January 1st, 1970 at which the TimeSpan starts.  May be *-Infinity*.\r\n\r\nThe following properties are READONLY:\r\n\r\n*.duration* - Milliseconds between *.starts* and *.ends*. READONLY. Computed dynamically.\r\n\r\n### Methods\r\n\r\n*.adjacent(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - The argument is within precision of the start or end of the TimeSpan. Returns -1 if argument is adjacent before, 1 if adjacent after and 0 if not adjacent.\r\n\r\n*.adjacentAfter(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - The argument is immediately after the end of the TimeSpan at the specified precision.\r\n\r\n*.adjacentBefore(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - The argument is immediately before the start of the TimeSpan at the specified precision.\r\n\r\n*.after(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])*  - The argument is after the end of the TimeSpan at the specified precision.\r\n\r\n*.before(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])*  - The argument is before the start of the TimeSpan at the specified precision.\r\n\r\n*.coincident(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - The start and end are the same for the TimeSpan and argument at the specified precision. If the argument is a point in time, then by definition the start and end of the TimeSpan are the same at the specified precision.\r\n\r\n*.contains(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - Returns *true* if TimeSpan contains the first argument at the given precision.\r\n\r\n*.disjoint(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - The negation of *.intersects*.\r\n\r\n*.intersects(milliseconds|Date|TimeSpan|datestring|Time[,precision=\"ms\"])* - Returns *true* if TimeSpan intersects the first argument at the given precision. For points in time arguments, the response will be the same as *.contains*. For TimeSpan arguments, the result will be true if either end is contained.\r\n\r\n\r\n# Updates (reverse chronological order)\r\n\r\n2016-01-09 v0.1.3 Added extensive unit tests. Corrected error with Time.prototype.in when testing against TimeSpan. Enhanced documentation.\r\n\r\n2016-01-03 v0.1.2 Clarified and made consistent semantics of Time precision. Renamed *.milliseconds* property to *.time* so comparisons can be done at the millisecond level.\r\n\r\n2015-12-31 v0.1.1 Removed Date object extensions that are not dependent on Time, Duration, TimeSpan. Moved Date object extensions from joex to this file where such extensions depend on Time, Duration, or TimeSpan\r\n\r\n2015-12-31 v0.1.0 Added toJSON, documentation and more unit tests. The behavior of Time changed substantially. The property *.milliseconds* is no longer modified when precision is changed. Instead, *.precision* is stored on the instance and *.valueOf()* returns the appropriate milliseconds. The behavior of Duration changed substantially. The properties *.period* and .*count* are now exposed and *.length* is computed dynamically. And, *.years, .quarters, .months, .weeks, .days, .hours, .minutes, .seconds, .milliseconds.* are READONLY.The TimeSpan objects eliminated the methods adjacentOrBefore and adjacentOrAfter and fixed bugs related to intersection and leap years.\r\n\r\n2015-12-29 v0.0.6 Added more unit tests\r\n\r\n2015-12-29 v0.0.5 Added revivers and unit tests\r\n\r\n2015-12-12 v0.0.4 Codacy driven improvements\r\n\r\n2015-11-29 v0.0.3 Initial public commit\r\n\r\n# License\r\n\r\nThis software is provided as-is under the [MIT license](http://opensource.org/licenses/MIT).\r\n",
  "readmeFilename": "README.md",
  "gitHead": "7b4be01be189e0aa058b9d3ede0349d542316dd0",
  "_id": "about-time@0.1.3",
  "_shasum": "b3f84585c57758998a9c86a4faa44b1af46a722b",
  "_from": "about-time@*"
}
