{
  "name": "jovial",
  "version": "0.0.10",
  "description": "Javascript Object Validation Interception Augmentation Library",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover node_modules/mocha/bin/_mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/anywhichway/jovial.git"
  },
  "keywords": [
    "schema",
    "validation"
  ],
  "author": {
    "name": "Simon Y. Blackwell",
    "email": "syblackwell@anywhichway.com",
    "url": "http://www.github.com/anywhichway"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/anywhichway/jovial/issues"
  },
  "homepage": "https://github.com/anywhichway/jovial#readme",
  "dependencies": {
    "chrome-proxy": ""
  },
  "devDependencies": {
    "chai": "^3.4.1",
    "istanbul": "^0.4.1",
    "mocha": "^2.3.4"
  },
  "readme": "# JOVIAL\r\nJavascript Object Validation Interception Augmentation Library.\r\n\r\n[![Codacy Badge](https://api.codacy.com/project/badge/grade/42cd44eee8794c22aa7a4f780abd2d0b)](https://www.codacy.com/app/syblackwell/jovial)\r\n\r\n# Install\r\n\r\nnpm install jovial\r\n\r\n# Philosophy\r\n\r\nProvide a light weight, easily extensible validation mechanism for Javascript objects.\r\n\r\n# Usage\r\n\r\nThe core of JOVIAL is the Validator class. The constructor for Validator takes a configuration object consisting of properties with the same names as those to be validated on a target object. The property values for the configuration object control the validation of the same named properties on a target object. For example:\r\n\r\n```{name : {type: 'string'}}``` will constrain 'name' to be a string.\r\n\r\nValidators are bound to either constructors or object instances using the instance method bind(constructorOrInstance,onError,name). If an 'onError' callback is not provided, then attempts to set invalid property values on the bound object with throw errors. The onError callback takes one argument, the error that would otherwise have been thrown. The 'name' argument is optional except in IE where the .name property is unavailable for Function objects. The names of bound constructors are used internal to the code. The bind method returns either a new instrumented constructor or a proxy for the bound object. The new instrumented constructor should be used in place of the original constructor. For example, the following will throw an error:\r\n\r\n```\r\nfunction Person() { }\r\nvar validator = new Validator({name: {type: 'string'}});\r\nPerson = validator.bind(Person);\r\nvar instance = new Person();\r\ninstance.name = 1;\r\n```\r\n\r\nThere are plans to fully support both real-time per property validation and batch validation. Hence, the errors thrown by JOVIAL are actually containers for other errors and details regarding the causes:\r\n\r\n```{object: {name:'Bill'},errors:{age: {value: -1, min: {constraint: 0, error: [RangeError]}}}}```\r\n\r\nCurrently JOVIAL supports:\r\n\r\nprimitive Javascript type checking, type = 'SSN', type = 'tel'; min, max, and between for numbers and strings; match = RegExp, required = true | false.\r\n\r\nThe following are in development:\r\n\r\ntype coercion, length tests, soundex.\r\n\r\nIf you would like others, then post an issue to GitHub with the code based on the extension instructions below.\r\n\r\n# Extending JOVIAL\r\n\r\nExtending JOVIAL is as simple as adding methods to the Validator class by the same name as the constraint desired on properties and providing an optional error type. For example, the constraints 'between' and 'min' are implemented as:\r\n\r\n```\r\nValidator.validation.between = function(between,value) {\r\n\t\tbetween.sort(function(a,b) { return a - b; });\r\n\t\tvar min = between[0];\r\n\t\tvar max = between[between.length-1];\r\n\t\treturn value>=min && value<=max;\r\n}\r\nValidator.validation.between.onError = RangeError;\r\nValidator.validation.min = function(min,value) {\r\n\t\treturn value>=min;\r\n}\r\nValidator.validation.min.onError = RangeError;\r\n```\r\n\r\n\r\n# Implementation\r\n\r\nJOVIAL is implemented using a Proxy. For Chrome, where the Proxy object is not yet available, the shim chrome-proxy is used.\r\n\r\nAs attempts are made to modify the properties of target objects at runtime the validation routines are called with the constraint established by the Validator and the new values being set by the application code. The validators are selected based on the names of constraint attributes. For example the following will throw an error because the method Validator.validation.min exists to match the Validator constraint:\r\n\r\n```\r\nfunction Person() { }\r\nvar validator = new Validator({name: {type: 'string'}, age: {type: 'number', min: 0}});\r\nPerson = validator.bind(Person);\r\nvar instance = new Person();\r\ninstance.age = -1;\r\n```\r\n\r\n# Testing\r\n\r\nTesting is conducted using Mocha, Chai, and Istanbul. \r\n\r\n# Updates (reverse chronological order)\r\n\r\n2015-12-13 v0.0.9 Added more unit tests and documentation\r\n\r\n2015-12-13 v0.0.8 Added unit tests and missing error handlers for min, max, matches\r\n\r\n2015-12-12 v0.0.7 Codacy driven improvements\r\n\r\n2015-11-29 v0.0.6 Original public commit\r\n\r\n# License\r\n\r\nThis software is provided as-is under the [MIT license](http://opensource.org/licenses/MIT).",
  "readmeFilename": "README.md",
  "gitHead": "cfa12ee79f61f428f485f8510eda622dea2fccba",
  "_id": "jovial@0.0.10",
  "_shasum": "1daded5fced8ec3a03d3e4b1d41fcdeb1f93b938",
  "_from": "jovial@*"
}
